// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rpc/burrow/namereg.proto

package burrow

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Params
type NameRegEntryParam struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NameRegEntryParam) Reset()         { *m = NameRegEntryParam{} }
func (m *NameRegEntryParam) String() string { return proto.CompactTextString(m) }
func (*NameRegEntryParam) ProtoMessage()    {}
func (*NameRegEntryParam) Descriptor() ([]byte, []int) {
	return fileDescriptor_namereg_4496634bf2190c58, []int{0}
}
func (m *NameRegEntryParam) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NameRegEntryParam.Unmarshal(m, b)
}
func (m *NameRegEntryParam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NameRegEntryParam.Marshal(b, m, deterministic)
}
func (dst *NameRegEntryParam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NameRegEntryParam.Merge(dst, src)
}
func (m *NameRegEntryParam) XXX_Size() int {
	return xxx_messageInfo_NameRegEntryParam.Size(m)
}
func (m *NameRegEntryParam) XXX_DiscardUnknown() {
	xxx_messageInfo_NameRegEntryParam.DiscardUnknown(m)
}

var xxx_messageInfo_NameRegEntryParam proto.InternalMessageInfo

func (m *NameRegEntryParam) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type TransactNameRegParam struct {
	InputAccount         *InputAccount `protobuf:"bytes,1,opt,name=inputAccount,proto3" json:"inputAccount,omitempty"`
	Name                 string        `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Data                 string        `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	Fee                  uint64        `protobuf:"varint,4,opt,name=fee,proto3" json:"fee,omitempty"`
	Amount               uint64        `protobuf:"varint,5,opt,name=amount,proto3" json:"amount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TransactNameRegParam) Reset()         { *m = TransactNameRegParam{} }
func (m *TransactNameRegParam) String() string { return proto.CompactTextString(m) }
func (*TransactNameRegParam) ProtoMessage()    {}
func (*TransactNameRegParam) Descriptor() ([]byte, []int) {
	return fileDescriptor_namereg_4496634bf2190c58, []int{1}
}
func (m *TransactNameRegParam) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TransactNameRegParam.Unmarshal(m, b)
}
func (m *TransactNameRegParam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TransactNameRegParam.Marshal(b, m, deterministic)
}
func (dst *TransactNameRegParam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransactNameRegParam.Merge(dst, src)
}
func (m *TransactNameRegParam) XXX_Size() int {
	return xxx_messageInfo_TransactNameRegParam.Size(m)
}
func (m *TransactNameRegParam) XXX_DiscardUnknown() {
	xxx_messageInfo_TransactNameRegParam.DiscardUnknown(m)
}

var xxx_messageInfo_TransactNameRegParam proto.InternalMessageInfo

func (m *TransactNameRegParam) GetInputAccount() *InputAccount {
	if m != nil {
		return m.InputAccount
	}
	return nil
}

func (m *TransactNameRegParam) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TransactNameRegParam) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

func (m *TransactNameRegParam) GetFee() uint64 {
	if m != nil {
		return m.Fee
	}
	return 0
}

func (m *TransactNameRegParam) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

// Results
type NameRegEntry struct {
	// registered name for the entry
	Name                 string   `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Owner                []byte   `protobuf:"bytes,2,opt,name=Owner,proto3" json:"Owner,omitempty"`
	Data                 string   `protobuf:"bytes,3,opt,name=Data,proto3" json:"Data,omitempty"`
	Expires              uint64   `protobuf:"varint,4,opt,name=Expires,proto3" json:"Expires,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NameRegEntry) Reset()         { *m = NameRegEntry{} }
func (m *NameRegEntry) String() string { return proto.CompactTextString(m) }
func (*NameRegEntry) ProtoMessage()    {}
func (*NameRegEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_namereg_4496634bf2190c58, []int{2}
}
func (m *NameRegEntry) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NameRegEntry.Unmarshal(m, b)
}
func (m *NameRegEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NameRegEntry.Marshal(b, m, deterministic)
}
func (dst *NameRegEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NameRegEntry.Merge(dst, src)
}
func (m *NameRegEntry) XXX_Size() int {
	return xxx_messageInfo_NameRegEntry.Size(m)
}
func (m *NameRegEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_NameRegEntry.DiscardUnknown(m)
}

var xxx_messageInfo_NameRegEntry proto.InternalMessageInfo

func (m *NameRegEntry) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NameRegEntry) GetOwner() []byte {
	if m != nil {
		return m.Owner
	}
	return nil
}

func (m *NameRegEntry) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

func (m *NameRegEntry) GetExpires() uint64 {
	if m != nil {
		return m.Expires
	}
	return 0
}

type NameRegEntryList struct {
	BlockHeight          uint64          `protobuf:"varint,1,opt,name=BlockHeight,proto3" json:"BlockHeight,omitempty"`
	Names                []*NameRegEntry `protobuf:"bytes,2,rep,name=Names,proto3" json:"Names,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *NameRegEntryList) Reset()         { *m = NameRegEntryList{} }
func (m *NameRegEntryList) String() string { return proto.CompactTextString(m) }
func (*NameRegEntryList) ProtoMessage()    {}
func (*NameRegEntryList) Descriptor() ([]byte, []int) {
	return fileDescriptor_namereg_4496634bf2190c58, []int{3}
}
func (m *NameRegEntryList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NameRegEntryList.Unmarshal(m, b)
}
func (m *NameRegEntryList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NameRegEntryList.Marshal(b, m, deterministic)
}
func (dst *NameRegEntryList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NameRegEntryList.Merge(dst, src)
}
func (m *NameRegEntryList) XXX_Size() int {
	return xxx_messageInfo_NameRegEntryList.Size(m)
}
func (m *NameRegEntryList) XXX_DiscardUnknown() {
	xxx_messageInfo_NameRegEntryList.DiscardUnknown(m)
}

var xxx_messageInfo_NameRegEntryList proto.InternalMessageInfo

func (m *NameRegEntryList) GetBlockHeight() uint64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *NameRegEntryList) GetNames() []*NameRegEntry {
	if m != nil {
		return m.Names
	}
	return nil
}

func init() {
	proto.RegisterType((*NameRegEntryParam)(nil), "NameRegEntryParam")
	proto.RegisterType((*TransactNameRegParam)(nil), "TransactNameRegParam")
	proto.RegisterType((*NameRegEntry)(nil), "NameRegEntry")
	proto.RegisterType((*NameRegEntryList)(nil), "NameRegEntryList")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// NameRegClient is the client API for NameReg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NameRegClient interface {
	GetEntry(ctx context.Context, in *NameRegEntryParam, opts ...grpc.CallOption) (*NameRegEntry, error)
	GetEntries(ctx context.Context, in *FilterListParam, opts ...grpc.CallOption) (*NameRegEntryList, error)
	TransactNameReg(ctx context.Context, in *TransactNameRegParam, opts ...grpc.CallOption) (*TxReceipt, error)
	TransactNameRegAndHold(ctx context.Context, in *TransactNameRegParam, opts ...grpc.CallOption) (*NameRegEntry, error)
}

type nameRegClient struct {
	cc *grpc.ClientConn
}

func NewNameRegClient(cc *grpc.ClientConn) NameRegClient {
	return &nameRegClient{cc}
}

func (c *nameRegClient) GetEntry(ctx context.Context, in *NameRegEntryParam, opts ...grpc.CallOption) (*NameRegEntry, error) {
	out := new(NameRegEntry)
	err := c.cc.Invoke(ctx, "/NameReg/GetEntry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nameRegClient) GetEntries(ctx context.Context, in *FilterListParam, opts ...grpc.CallOption) (*NameRegEntryList, error) {
	out := new(NameRegEntryList)
	err := c.cc.Invoke(ctx, "/NameReg/GetEntries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nameRegClient) TransactNameReg(ctx context.Context, in *TransactNameRegParam, opts ...grpc.CallOption) (*TxReceipt, error) {
	out := new(TxReceipt)
	err := c.cc.Invoke(ctx, "/NameReg/TransactNameReg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nameRegClient) TransactNameRegAndHold(ctx context.Context, in *TransactNameRegParam, opts ...grpc.CallOption) (*NameRegEntry, error) {
	out := new(NameRegEntry)
	err := c.cc.Invoke(ctx, "/NameReg/TransactNameRegAndHold", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NameRegServer is the server API for NameReg service.
type NameRegServer interface {
	GetEntry(context.Context, *NameRegEntryParam) (*NameRegEntry, error)
	GetEntries(context.Context, *FilterListParam) (*NameRegEntryList, error)
	TransactNameReg(context.Context, *TransactNameRegParam) (*TxReceipt, error)
	TransactNameRegAndHold(context.Context, *TransactNameRegParam) (*NameRegEntry, error)
}

func RegisterNameRegServer(s *grpc.Server, srv NameRegServer) {
	s.RegisterService(&_NameReg_serviceDesc, srv)
}

func _NameReg_GetEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NameRegEntryParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NameRegServer).GetEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NameReg/GetEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NameRegServer).GetEntry(ctx, req.(*NameRegEntryParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _NameReg_GetEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilterListParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NameRegServer).GetEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NameReg/GetEntries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NameRegServer).GetEntries(ctx, req.(*FilterListParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _NameReg_TransactNameReg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactNameRegParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NameRegServer).TransactNameReg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NameReg/TransactNameReg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NameRegServer).TransactNameReg(ctx, req.(*TransactNameRegParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _NameReg_TransactNameRegAndHold_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactNameRegParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NameRegServer).TransactNameRegAndHold(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NameReg/TransactNameRegAndHold",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NameRegServer).TransactNameRegAndHold(ctx, req.(*TransactNameRegParam))
	}
	return interceptor(ctx, in, info, handler)
}

var _NameReg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "NameReg",
	HandlerType: (*NameRegServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetEntry",
			Handler:    _NameReg_GetEntry_Handler,
		},
		{
			MethodName: "GetEntries",
			Handler:    _NameReg_GetEntries_Handler,
		},
		{
			MethodName: "TransactNameReg",
			Handler:    _NameReg_TransactNameReg_Handler,
		},
		{
			MethodName: "TransactNameRegAndHold",
			Handler:    _NameReg_TransactNameRegAndHold_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/burrow/namereg.proto",
}

func init() { proto.RegisterFile("rpc/burrow/namereg.proto", fileDescriptor_namereg_4496634bf2190c58) }

var fileDescriptor_namereg_4496634bf2190c58 = []byte{
	// 370 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x52, 0x5d, 0x4f, 0x2a, 0x31,
	0x10, 0xcd, 0xc2, 0xf2, 0x71, 0x07, 0x6e, 0x2e, 0x34, 0x5c, 0xee, 0x86, 0xa7, 0xcd, 0xde, 0x07,
	0x79, 0x71, 0x09, 0xe8, 0xb3, 0x09, 0x44, 0x14, 0x13, 0x83, 0xa6, 0xe1, 0x45, 0xdf, 0xca, 0x52,
	0x70, 0x23, 0xdb, 0x6e, 0xba, 0x25, 0xe0, 0x6f, 0xf1, 0xd7, 0xf9, 0x4f, 0x4c, 0xdb, 0x55, 0x0b,
	0xe8, 0xdb, 0xcc, 0x99, 0x33, 0xe7, 0xcc, 0x74, 0x0a, 0x9e, 0x48, 0xa3, 0xde, 0x7c, 0x23, 0x04,
	0xdf, 0xf6, 0x18, 0x49, 0xa8, 0xa0, 0xab, 0x30, 0x15, 0x5c, 0xf2, 0xce, 0x3f, 0xab, 0x12, 0xf1,
	0x24, 0xe1, 0xcc, 0x14, 0x82, 0x13, 0x68, 0x4e, 0x49, 0x42, 0x31, 0x5d, 0x8d, 0x99, 0x14, 0x2f,
	0xf7, 0x44, 0x90, 0x04, 0x21, 0x70, 0x55, 0xbb, 0xe7, 0xf8, 0x4e, 0xf7, 0x17, 0xd6, 0x71, 0xf0,
	0xea, 0x40, 0x6b, 0x26, 0x08, 0xcb, 0x48, 0x24, 0xf3, 0x0e, 0x43, 0xee, 0x43, 0x3d, 0x66, 0xe9,
	0x46, 0x0e, 0xa3, 0x88, 0x6f, 0x98, 0xd4, 0x4d, 0xb5, 0xc1, 0xef, 0xf0, 0xc6, 0x02, 0xf1, 0x1e,
	0xe5, 0x53, 0xbf, 0xf0, 0xa5, 0xaf, 0xb0, 0x05, 0x91, 0xc4, 0x2b, 0x1a, 0x4c, 0xc5, 0xa8, 0x01,
	0xc5, 0x25, 0xa5, 0x9e, 0xeb, 0x3b, 0x5d, 0x17, 0xab, 0x10, 0xb5, 0xa1, 0x4c, 0x12, 0x6d, 0x53,
	0xd2, 0x60, 0x9e, 0x05, 0x4b, 0xa8, 0xdb, 0x6b, 0x28, 0xb5, 0xa9, 0xb5, 0x81, 0x8a, 0x51, 0x0b,
	0x4a, 0x77, 0x5b, 0x46, 0x85, 0xb6, 0xad, 0x63, 0x93, 0x28, 0xe6, 0xa5, 0xe5, 0xab, 0x62, 0xe4,
	0x41, 0x65, 0xbc, 0x4b, 0x63, 0x41, 0xb3, 0xdc, 0xfb, 0x23, 0x0d, 0x1e, 0xa0, 0x61, 0xfb, 0xdc,
	0xc6, 0x99, 0x44, 0x3e, 0xd4, 0x46, 0x6b, 0x1e, 0x3d, 0x4f, 0x68, 0xbc, 0x7a, 0x32, 0xfb, 0xbb,
	0xd8, 0x86, 0xd0, 0x7f, 0x28, 0xa9, 0xae, 0xcc, 0x2b, 0xf8, 0x45, 0xfd, 0x36, 0xb6, 0x06, 0x36,
	0xb5, 0xc1, 0x9b, 0x03, 0x95, 0x1c, 0x47, 0xa7, 0x50, 0xbd, 0xa6, 0x32, 0x5f, 0x25, 0x3c, 0x3a,
	0x50, 0x67, 0x5f, 0x01, 0xf5, 0x01, 0x72, 0x7a, 0x4c, 0x33, 0xd4, 0x08, 0xaf, 0xe2, 0xb5, 0xa4,
	0x42, 0x0d, 0x67, 0xe8, 0xcd, 0xf0, 0x68, 0xe8, 0x73, 0xf8, 0x73, 0x70, 0x4d, 0xf4, 0x37, 0xfc,
	0xee, 0xbe, 0x1d, 0x08, 0x67, 0x3b, 0x4c, 0x23, 0x1a, 0xa7, 0x12, 0x5d, 0x40, 0xfb, 0x80, 0x33,
	0x64, 0x8b, 0x09, 0x5f, 0x2f, 0x7e, 0x6a, 0xde, 0x1f, 0x74, 0x54, 0x7d, 0x2c, 0x9b, 0x4f, 0x38,
	0x2f, 0xeb, 0xef, 0x77, 0xf6, 0x1e, 0x00, 0x00, 0xff, 0xff, 0x69, 0xcb, 0xf2, 0xea, 0xb3, 0x02,
	0x00, 0x00,
}
